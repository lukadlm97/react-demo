Osnovna podela komponenti u reactu je na stateless i statefull.
Pod stateless podrazumevano najcesce funkcije koje vracaju 
html koji opisuje UI.
Pod statefull podrazumevamo klase koje nasldjuju klasu components.
One sigurno imaju render() funkciju koja vraca html.
==================================================================
Funkcionalne komponente	|
-------------------------
Klasicne JS funkcije, i opciono mogu primati property koje oslikava
props i vracaju html koji opisuje UI. 
-------------------------
Komponente klase	|
-------------------------
Cuvaju stanje kao privatne podatke, mogu sadrzati komplikovane UI 
logike.
==================================================================
PROPS
Komponente su pogodne jer su reuseable. Props su elementi koje 
komponente podrzavaju i pomazu kod ostvarivanja dinamike.

Kod funkcionalnih komponenti mozemo imati iskljucivo jedan html
kojim je ukoviren celokupan sadrzaj strane. Vrednosti props-a se
ne mogu menjati!!!
==================================================================
STATE
Stanje odrzavaju promenljive definisane u body delu funkcije
Za razliku od props-a, stanje se moze menjati
Kada treba neku komponentu u toku izvresenja da promenimo, resenje
 je stanje komponente. 
Kada se koristi konstruktor u okviru komponente, obavezno je 
pozivanje super() metode nadklase.
Uvek kada je neophodna promena stanja, treba koristi setState 
metodu. Nikada to ne treba raditi direktno!!! Razlog tome je jer
React onda ne renduje komponente sa promenenjenim stanjima, 
vec samo ako je pozvana metoda setState()
Kod recimo logovanja neke vrednosti, asinhronost se moze javiti.
Problem se resava callback funkcijama, koje omogucavaju da se 
vrednost loguje tek nakon izvrsenja metode
Kada pozivamo metodu setState vise puta u jednom izvrsenju,
React sve pozive grupise u jedan poziv. Taj poziv se izvrsi,
i promenljiva ne uzima u obzir vrednost iz prethodnog poziva.
Resenje se nalazi u slanju prethodnog stanja kao ulazne promenljive
=================================================================
RESTRUCTURING
Omogucava da se odpakuju vrednosti iz nizova ili atributi iz
objekata u neku promenljivu. Poboljsava citljivosti koda. Moguce
je atribute procitati iz objekta primer {name,age} = props ako
su atributi tako prosledjeni kao paramteri. Slicno se radi i sa
state promenljivima sto se same dodele tice.
=================================================================
EVENT HANDLERS
Bitna stvar da kada se menja state varijabla mora da se pomocu
funkcije poveze i prosledi stanje. .bind(this) Drugi nacin je da se
prosledi kao {() => nameOfFunction()}
=================================================================
LISTS
Nema neke velike razlike u odnosu na ubicajene liste. Fore sa 
indeksima su intuitivne i nije frka
=================================================================
CSS
Ima tri nacina na koje je moguce pristupati css-u, i sva tri
su dosta jednostavna
=================================================================
LIFECYCLE
Mounting, Update-ing, Unmounting, Error su tri osnovne 
faze kod rada sa komponentama. 
Mounting
--------
U okviru ove faze se poziva konstruktor
U okviru konstruktora je pozeljna inicijalizacija stanja,
veyivanje event handler-a, ali NIKAKO pravljenje HTTP req
super(props) ya ugradjeni construktor
getDerivedStateFromProps(props,state)
-koristi se kada imamo da 
neka komponenta u state-u zavisi od props-a u vreme izvrsavanja.
To zapravo znaci da jedino preko ove komponente u mozemo menjati
stanje.
render() - jedina obavezna metoda. cita props i state i vraca js
U okviru nje ne treba menajti satanje ili pozivati ajax
didMount() - metoda koja se poziva povremeno nakon sto se
sve komponente kojima je ona roditelj izrenderuju
Pogodna je za side-effects, tj akza komunikacijus a serverom itd.
Sto se redosleda izvravana tice imamo
roditeljConstructor()
roditeljGetDerivedStateFromProps()
roditeljRender()
deteConstructor()
deteGetDerivedStateFromProps()
deteRender()
deteDidMount()
roditeljDidMount()






